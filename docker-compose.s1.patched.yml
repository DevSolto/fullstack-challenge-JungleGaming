services:
  db:
    image: postgres:17.5-alpine3.21
    container_name: db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: postgres
      POSTGRES_DB: challenge_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} -h localhost || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks: [challenge-network]

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks: [challenge-network]

  api-gateway:
    container_name: api-gateway
    build:
      context: .
      dockerfile: ./apps/api-gateway/Dockerfile
    working_dir: /app
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      CHOKIDAR_USEPOLLING: "true"
    volumes:
      - .:/app
      - pnpm_store:/root/.local/share/pnpm
      - /app/node_modules
      - /app/apps/api-gateway/node_modules
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks: [challenge-network]
    command: >
      sh -lc "
        corepack enable &&
        pnpm -v &&
        pnpm -w install --frozen-lockfile=false &&
        pnpm -F @apps/api-gateway start:dev
      "

volumes:
  postgres_data:
  rabbitmq_data:
  pnpm_store:

networks:
  challenge-network:
    driver: bridge
